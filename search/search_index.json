{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"<p>  \u300a Hello\uff0c\u5bc6\u7801\u5b66 \u300b  <p> \u52a8\u753b\u56fe\u89e3\u3001\u80fd\u8fd0\u884c\u3001\u53ef\u8ba8\u8bba\u7684\u5bc6\u7801\u5b66\u5165\u95e8\u6559\u7a0b </p> </p>  \u300c\u6e05\u6670\u52a8\u753b\u8bb2\u89e3\u300d  <p> \u52a8\u753b\u8be0\u91ca\u91cd\u70b9\uff0c\u5e73\u6ed1\u5b66\u4e60\u66f2\u7ebf\u7535\u8111\u3001\u5e73\u677f\u3001\u624b\u673a\u5168\u7ec8\u7aef\u9605\u8bfb </p>  \u300c\u4ee3\u7801\u5b9e\u8df5\u5bfc\u5411\u300d  <p> \u63d0\u4f9b\u5bc6\u7801\u7b97\u6cd5\u7684\u6e05\u6670\u5b9e\u73b0\u4e0e\u6d4b\u8bd5\u4ee3\u7801\u591a\u79cd\u8bed\u8a00\uff0c\u8be6\u7ec6\u6ce8\u91ca\uff0c\u7686\u53ef\u4e00\u952e\u8fd0\u884c </p>"},{"location":"#_1","title":"\u81f4\u8c22","text":"<p>\u7075\u611f\u6765\u6e90\u5f00\u6e90\u9879\u76ee \u300aHello, \u7b97\u6cd5\u300bkarhets/hello-algo </p> <ul> <li>https://www.hello-algo.com/</li> </ul>"},{"location":"asymmetric/","title":"\u975e\u5bf9\u79f0\u5bc6\u7801\u5b66","text":"<p>\u7b80\u4ecb</p> <p>\u975e\u5bf9\u79f0\u5bc6\u7801\u5b66 \u4e5f\u79f0\u4e3a\u516c\u94a5\u5bc6\u7801\u5b66</p> <p>\u516c\u94a5\u7b97\u6cd5\u662f\u73b0\u4ee3\u5bc6\u7801\u4f53\u7cfb\u4e2d\u7684\u91cd\u8981\u5b89\u5168\u57fa\u7840\uff0c\u5305\u62ec\u6570\u636e\u7684\u52a0\u5bc6\u4f20\u8f93\u3001\u771f\u5b9e\u6027\u548c\u4e0d\u53ef\u5426\u8ba4\u7684\u4fdd\u8bc1\u3002</p> <ul> <li>\u5bc6\u94a5\u4ea4\u6362\u7684 DH Diffie\u2013Hellman</li> <li>\u6570\u5b57\u7b7e\u540d</li> </ul>"},{"location":"asymmetric/#_2","title":"\u4e3b\u8981\u6280\u672f","text":"<ul> <li>RSA</li> <li>ECDSA (\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5)</li> <li>ECDH  (\u692d\u5706\u66f2\u7ebf\u5bc6\u94a5\u4ea4\u6362)</li> <li>Ed25519\u548cEd448(EdDSA)</li> <li>X25519\u548cX448 (ECDH/EdDH)</li> <li>Curve25519 / Ed25519 / X25519</li> </ul>"},{"location":"asymmetric/#curve25519ed25519x25519","title":"Curve25519/Ed25519/X25519","text":"<p>Curve25519/Ed25519/X25519 \u8fd9\u662f\u4e00\u4e2a\u5bb6\u65cf</p> <p>2005 \u5e74\uff0cCurve25519 \u7531 <code>Daniel J. Bernstein</code>\u9996\u6b21\u53d1\u5e03</p> <p>Curve25519 \u7528\u4e8e\u52a0\u89e3\u5bc6\uff0cX25519\u7528\u4e8e\u5bc6\u94a5\u4ea4\u6362\uff0cEd25519\u7528\u4e8e\u7b7e\u540d\u9a8c\u8bc1</p> <p>\u8499\u54e5\u9a6c\u5229\u66f2\u7ebf</p> \\[ y^{2}=x^{3}+486662 x^{2}+x \\]"},{"location":"asymmetric/dh/","title":"DH (Diffie-Hellman) \u8fea\u83f2\u2014\u8d6b\u5c14\u66fc\u5bc6\u94a5\u4ea4\u6362","text":"<p>Diffie-Hellman\u5bc6\u94a5\u4ea4\u6362\u7528\u8fd9\u79cd\u7b97\u6cd5\u901a\u4fe1\u53cc\u65b9\u4ec5\u901a\u8fc7\u4ea4\u6362\u4e00\u4e9b\u53ef\u4ee5\u516c\u5f00\u7684\u4fe1\u606f\u5c31\u80fd\u591f\u751f\u6210\u51fa\u5171\u4eab\u7684\u79d8\u5bc6\u6570\u5b57\uff0c \u800c\u8fd9\u4e00\u79d8\u5bc6\u6570\u5b57\u5c31\u53ef\u4ee5\u88ab\u7528\u4f5c\u5bf9\u79f0\u5bc6\u7801\u7684\u5bc6\u94a5\u3002</p> <p>!!!\u8fea\u83f2\u2014\u8d6b\u5c14\u66fc\u5bc6\u94a5\u4ea4\u6362</p> <pre><code>\u8fea\u83f2\u2014\u8d6b\u5c14\u66fc\u5bc6\u94a5\u4ea4\u6362 (Diffie\u2013Hellman key exchange\uff0c\u7f29\u5199\u4e3aDH) \u662f\u4e00\u79cd\u4fdd\u5bc6\u901a\u4fe1\u534f\u8bae\n</code></pre> <p>1976\u5e74 Diffie \u548c Hellman\u53d1\u5e03 \u8fea\u83f2\u2014\u8d6b\u5c14\u66fc\u5bc6\u94a5\u4ea4\u6362\uff0c\u6700\u65e9\u601d\u60f3\u7531Hellman\u7684\u535a\u58eb\u7814\u7a76\u751f\u745e\u592b\u00b7\u58a8\u514b (Ralph Merkle) \u63d0\u51fa\u3002 \u800c\u540e Hellman\u548c\u7814\u7a76\u52a9\u7406Diffie\u5171\u540c\u53d1\u660e\u4e86 \u8fea\u83f2\u2014\u8d6b\u5c14\u66fc\u5bc6\u94a5\u4ea4\u6362\u534f\u8bae\u3002</p>"},{"location":"asymmetric/dh/#_1","title":"\u6570\u5b66\u539f\u7406","text":"<p>DH\u57fa\u4e8e\u6570\u8bba\uff0c\u6574\u6570\u6a21 n \u4e58\u6cd5\u7fa4\u53ca\u5176\u539f\u6839\u7684\u6a21\u5e42\u8fd0\u7b97\u3002</p> <ol> <li> <p>Alice \u548c Bob\u516c\u5f00\u540c\u610f\u4f7f\u7528\u6a21\u6570p = 23\u548c\u57fa\u6570g = 5\uff08\u5373\u539f\u6839\u6a21\u6570 23\uff09\u3002</p> </li> <li> <p>Alice \u9009\u62e9\u4e00\u4e2a\u79d8\u5bc6\u6574\u6570a = 4\uff0c\u7136\u540e\u53d1\u9001\u7ed9 $$ Bob A = g^{a} mod p$$     $$ A = 5^{4}  mod 23 = 4$$\uff08\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c A\u548ca\u7684\u503c\u76f8\u540c\uff0c\u5747\u4e3a 4\uff0c\u4f46\u901a\u5e38\u60c5\u51b5\u5e76\u975e\u5982\u6b64\uff09</p> </li> <li> <p>Bob \u9009\u62e9\u4e00\u4e2a\u79d8\u5bc6\u6574\u6570b = 3\uff0c\u7136\u540e\u53d1\u9001\u7ed9 Alice B = g b mod p  B = 5 3\u6a2123 = 10</p> </li> <li> <p>\u7231\u4e3d\u4e1d\u8ba1\u7b97s = B a mod p s =10 4\u6a2123=18</p> </li> <li> <p>Bob \u8ba1\u7b97s = A b mod p s =4 3\u6a2123=18</p> </li> <li> <p>\u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\u73b0\u5728\u5171\u4eab\u4e00\u4e2a\u79d8\u5bc6\uff08\u6570\u5b57 18\uff09</p> </li> </ol>"},{"location":"asymmetric/dh/#3xdh","title":"3XDH","text":"<p>1997 \u5e74\uff0cSimon Blake-Wilson\u3001Don Johnson\u3001Alfred Menezes\u63d0\u51fa\u4e86\u4e00\u79cd\u4e09\u91cdDH\u7684\u5b9e\u73b0\u3002</p>"},{"location":"asymmetric/ed25519/","title":"Ed25519","text":""},{"location":"asymmetric/ed25519/#ed25519","title":"Ed25519","text":"\\[-x^{2} + y^{2} = 1 - (121665 / 121666) * x^{2} * y^{2}  (mod  2^{255} - 19) \\]"},{"location":"asymmetric/ed25519/#_1","title":"\u751f\u6210\u5bc6\u94a5\u5bf9","text":"PythonGolangJavaScript <pre><code>import base64\nfrom cryptography.exceptions import InvalidSignature\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import ed25519\ndef generate_ed25519_key_pair(format_type=None):\nprivate_key_obj = ed25519.Ed25519PrivateKey.generate()\npubkey_obj = private_key_obj.public_key()\nif not format_type:\nreturn private_key_obj, pubkey_obj\nprivate_bytes = private_key_obj.private_bytes(\nencoding=serialization.Encoding.Raw,\nformat=serialization.PrivateFormat.Raw,\nencryption_algorithm=serialization.NoEncryption()\n)\npublic_bytes = pubkey_obj.public_bytes(\nencoding=serialization.Encoding.Raw,\nformat=serialization.PublicFormat.Raw\n)\nif format_type == \"hex\":\nreturn private_bytes.hex(), public_bytes.hex()\nelif format_type == \"base64\":\nprivate_key = base64.b64encode(private_bytes).decode()\npubkey = base64.b64encode(public_bytes).decode()\nreturn private_key, pubkey\nelif format_type == \"bytes\":\nreturn private_bytes, public_bytes\nelse:\nraise Exception(\"Invalid format type\")\nprivate_key, public_key = generate_ed25519_key_pair(\"hex\")\n</code></pre> <pre><code>import (\n\"crypto/ed25519\"\n\"crypto/rand\"\n\"encoding/hex\"\n)\nfunc generateEd25519KeyPair() (string, string, error) {\npubkey, priv, err := ed25519.GenerateKey(rand.Reader)\nif err != nil {\nreturn \"\", \"\", err\n}\nreturn hex.EncodeToString(priv.Seed()), hex.EncodeToString(pubkey), nil\n}\n</code></pre> Install ed25519 package<pre><code>npm install @noble/ed25519\n</code></pre> <pre><code>import * as ed from '@noble/ed25519';\nconst Uint8ToBase64String = (u8a: any) =&gt; {\nreturn btoa(String.fromCharCode.apply(null, u8a));\n};\nconst GenerateEd25519KeyPair = async (exportType: string) =&gt; {\nlet privateObj = ed.utils.randomPrivateKey();\nlet pubkeyObj = await ed.getPublicKey(privateObj);\nlet PrivateKey = '',\nPublicKey = '';\nif (exportType == 'base64') {\nPrivateKey = Uint8ToBase64String(privateObj);\nPublicKey = Uint8ToBase64String(pubkeyObj);\n} else if ((exportType = 'hex')) {\nPrivateKey = ed.utils.bytesToHex(privateObj);\nPublicKey = ed.utils.bytesToHex(pubkeyObj);\n}\nreturn {\nPrivateKey,\nPublicKey,\n};\n};\n</code></pre>"},{"location":"asymmetric/ed25519/#_2","title":"\u7b7e\u540d","text":"PythonGolangJavaScript <pre><code>import base64\nfrom cryptography.exceptions import InvalidSignature\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import ed25519\ndef load_ed25519_private_key_from_hex(private_key_hex: str):\nreturn ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex(private_key_hex))\ndef ed25519_sign(private_key_hex: str, plain_text: str):\nprivate_key = load_ed25519_private_key_from_hex(private_key_hex)\nsignature = private_key.sign(plain_text.encode('utf-8'))\nreturn signature\n</code></pre> <pre><code>import (\n\"crypto/ed25519\"\n\"crypto/rand\"\n\"encoding/hex\"\n)\nfunc GenerateEd25519Signature(privateHex string, data string) (string, error) {\nkeySeed, err := hex.DecodeString(privateHex)\nif err != nil {\nreturn \"\", err\n}\nresultByte := ed25519.Sign(ed25519.NewKeyFromSeed(keySeed), []byte(data))\nreturn hex.EncodeToString(resultByte)\n}\n</code></pre> <pre><code>import * as ed from '@noble/ed25519';\ndeclare type Hex = Uint8Array | string;\nconst Ed25519Sign = async (privateKey: Hex, message: Uint8Array) =&gt; {\nconst signature = await ed.sign(message, privateKey);\nreturn signature;\n};\n</code></pre>"},{"location":"asymmetric/ed25519/#_3","title":"\u9a8c\u8bc1\u7b7e\u540d","text":"PythonGolangJavaScript <pre><code>from cryptography.exceptions import InvalidSignature\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import ed25519\ndef load_ed25519_pubkey_from_hex(pubkey_hex: str):\nreturn ed25519.Ed25519PublicKey.from_public_bytes(bytes.fromhex(pubkey_hex))\ndef ed25519_verify(pub_key_hex: str, signature: bytes, plain_text: str):\npubkey = load_ed25519_pubkey_from_hex(pub_key_hex)\ntry:\npubkey.verify(signature, plain_text.encode('utf-8'))\nexcept InvalidSignature:\nreturn False\nelse:\nreturn True\n</code></pre> <pre><code>func Ed25519Verify(keyFormat string, pubkey string, msg string, signatureStr string) (bool, error) {\nmsgByte := []byte(msg)\nif pubkey == \"\" {\nreturn false, errors.New(\"invalid pubkey\")\n}\npubKey, err := hex.DecodeString(pubkey)\nif err != nil {\nreturn false, err\n}\nvar signature string\nvar err error\nif keyFormat == \"hex\" {\nsignature, err = hex.DecodeString(signatureStr)\nif err != nil {\nreturn false, err\n}\n} else if keyFormat == \"base64\" {\nsignature, err = base64.StdEncoding.DecodeString(signatureStr)\nif err != nil {\nreturn false, err\n}\n}\nisValid := ed25519.Verify(pubKey, msgByte, signature)\nreturn isValid, nil\n}\n</code></pre> <pre><code>import * as ed from '@noble/ed25519';\ndeclare type Hex = Uint8Array | string;\nconst Ed25519Verify = async (pubKey: Hex, signature: Hex, message: Hex) =&gt; {\nconst isValid = await ed.verify(signature, message, pubKey);\nreturn isValid;\n};\n</code></pre>"},{"location":"asymmetric/rsa/","title":"RSA","text":"<p>\ud83d\udea7 \u65bd\u5de5\u4e2d...</p>"},{"location":"asymmetric/x25519/","title":"Curve25519\uff08X25519\uff09","text":"<p>X25519\u4e0eEd25519\u7684\u8054\u7cfb, \u4e24\u8005\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362</p> <ul> <li>Curve25519\uff08X25519\uff09\u662f\u8fdb\u884c\u8499\u54e5\u9a6c\u5229\u66f2\u7ebf\uff08Montgomery Curve\uff09\u8fea\u83f2\u8d6b\u5c14\u66fc\u79d8\u94a5\u4ea4\u6362\u7684\u692d\u5706\u66f2\u7ebf\u7b97\u6cd5\u3002</li> <li>Ed25519\u662f\u8fdb\u884c\u7231\u5fb7\u534e\u66f2\u7ebf\uff08Edwards Curve\uff09\u6570\u5b57\u7b7e\u540d\u7684\u692d\u5706\u66f2\u7ebf\u7b97\u6cd5\u3002</li> </ul>"},{"location":"asymmetric/x25519/#montgomery-curve","title":"\u8499\u54e5\u9a6c\u5229\u66f2\u7ebf\uff08Montgomery Curve\uff09","text":"\\[A = 486662\\] \\[P = 2^{255} - 19\\] \\[y^{2} = x^{3} + A * x^{2} + x mod P\\] <p>Generate KeyPair</p> Python <pre><code>from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey\nprivate_key = X25519PrivateKey.generate()\npeer_public_key = private_key.public_key()\n</code></pre>"},{"location":"chapter_preface/","title":"\u5bc6\u7801\u5b66\u7b80\u4ecb Cryptography","text":"<p>\u4ec0\u4e48\u662f\u5bc6\u7801\u5b66</p> <p>\u5bc6\u7801\u5b66\u4e00\u8bcd\u6e90\u4e8e\u5e0c\u814a\u8bed krypt\u00f3s\u201c\u9690\u85cf\u7684\u201d\uff0c\u548c gr\u00e1phein\u201c\u4e66\u5199\u201d.</p> <p>\u5bc6\u7801\u5b66\u53ef\u5206\u4e3a\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66</p> <p>\u53e4\u5178\u5bc6\u7801</p> <p>\u53e4\u5178\u5bc6\u7801\u5b66\u4e3b\u8981\u5173\u6ce8\u4fe1\u606f\u7684\u4fdd\u5bc6\u4e66\u5199\u548c\u4f20\u9012\uff0c\u4ee5\u53ca\u4e0e\u5176\u76f8\u5bf9\u5e94\u7684\u7834\u8bd1\u65b9\u6cd5\u3002</p> <p>\u73b0\u4ee3\u5bc6\u7801</p> <p>\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e0d\u53ea\u5173\u6ce8\u4fe1\u606f<code>\u4fdd\u5bc6</code>\u95ee\u9898\uff0c\u8fd8\u540c\u65f6\u6d89\u53ca\u4fe1\u606f<code>\u5b8c\u6574\u6027</code>\u9a8c\u8bc1\uff08<code>\u6d88\u606f\u9a8c\u8bc1\u7801</code>\uff09\u3001\u4fe1\u606f\u53d1\u5e03\u7684<code>\u4e0d\u53ef\u62b5\u8d56\u6027</code>\uff08<code>\u6570\u5b57\u7b7e\u540d</code>\uff09\u3001\u4ee5\u53ca\u5728\u5206\u5e03\u5f0f\u8ba1\u7b97\u4e2d\u4ea7\u751f\u7684\u6765\u6e90\u4e8e\u5185\u90e8\u548c\u5916\u90e8\u7684\u653b\u51fb\u7684\u6240\u6709\u4fe1\u606f\u5b89\u5168\u95ee\u9898</p> <p>\u2014\u2014 wikipedia</p>"},{"location":"chapter_preface/#_1","title":"\u53e4\u5178\u5bc6\u7801\u5b66","text":"<ul> <li>\u51ef\u6492\u5bc6\u7801</li> <li>\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801</li> </ul>"},{"location":"chapter_preface/#_2","title":"\u73b0\u4ee3\u5bc6\u7801\u5b66","text":"<ul> <li>\u5bf9\u79f0\u5bc6\u7801\u5b66</li> <li>\u516c\u94a5\u5bc6\u7801\u5b66</li> <li>\u968f\u673a\u6570</li> <li>\u54c8\u5e0c\u51fd\u6570</li> </ul>"},{"location":"chapter_preface/about_the_book/","title":"\u5173\u4e8e\u672c\u4e66","text":"<p>\u4ece\u4e8b\u4e92\u8054\u7f51\u884c\u4e1a\uff0c\u6216\u591a\u6216\u5c11\u4f1a\u9047\u5230\u4e9b\u5bc6\u7801\u5b66\u76f8\u5173\u7684\u95ee\u9898\uff1b\u53ef\u80fd\u662f\u5b9e\u73b0\u4e00\u4e2a\u52a0\u5bc6\u7684\u529f\u80fd\uff0c\u6216\u8005\u662f\u5185\u5bb9\u7b7e\u540d\u7b49\u3002 \u770b\u8fc7\u4e00\u4e9b\u4e66\u7c4d\u4e5f\u5b66\u8fc7\u4e00\u4e9b\u89c6\u9891\u6559\u7a0b\uff0c\u5c06\u81ea\u5df1\u7684\u4e00\u4e9b\u79ef\u7d2f\u603b\u7ed3\u51fa\u6765\uff0c\u65b9\u4fbf\u81ea\u5df1\u4ee5\u540e\u56de\u987e\u590d\u4e60\uff0c\u5982\u679c\u80fd\u5e2e\u52a9\u4ed6\u4eba\u5e78\u751a\u3002</p> <p>Plan</p> <p>\u76ee\u524d\u5b9e\u73b0\u8ba1\u5212\u5982\u4e0b\uff0c\u5982\u679c\u4f60\u6709\u5176\u4ed6\u8bed\u8a00\u7684\u5b9e\u73b0\uff0c\u6b22\u8fce\ud83d\udc4f\u63d0\u4ea4PR</p>"},{"location":"chapter_preface/about_the_book/#_2","title":"\u73af\u5883\u5b89\u88c5","text":"<ul> <li>JavaScript</li> <li>Python</li> <li>Golang</li> </ul>"},{"location":"chapter_preface/about_the_book/#_3","title":"\u4e0d\u540c\u8bed\u8a00\u7684\u4e00\u4e9b\u5bc6\u7801\u5b66\u5e93","text":""},{"location":"chapter_preface/about_the_book/#python","title":"Python","text":"<ul> <li>Cryptography</li> </ul>"},{"location":"chapter_preface/classic/","title":"\u53e4\u5178\u5bc6\u7801\u5b66","text":""},{"location":"chapter_preface/classic/#_2","title":"\u53e4\u5178\u5bc6\u7801\u5b66","text":"<ul> <li>\u51ef\u6492\u5bc6\u7801</li> <li>\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801</li> </ul> <p>\ud83d\udea7 \u65bd\u5de5\u4e2d...</p>"},{"location":"chapter_preface/history/","title":"\u5bc6\u7801\u5b66\u5386\u53f2","text":"<p>\ud83d\udea7 \u65bd\u5de5\u4e2d...</p>"},{"location":"chapter_preface/history/#_2","title":"\u53e4\u5178\u5bc6\u7801\u5b66","text":"<ul> <li>\u51ef\u6492\u5bc6\u7801</li> <li>\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801</li> </ul>"},{"location":"chapter_preface/history/#_3","title":"\u73b0\u4ee3\u5bc6\u7801\u5b66","text":"<ul> <li>\u5bf9\u79f0\u5bc6\u7801\u5b66</li> <li>\u975e\u5bf9\u79f0\u5bc6\u7801\u5b66\u5b66\uff08\u516c\u94a5\u5bc6\u7801\u5b66\uff09</li> </ul>"},{"location":"chapter_preface/modern/","title":"\u73b0\u4ee3\u5bc6\u7801\u5b66","text":"<p>\u5728\u8fd1\u4ee3\u4ee5\u524d\uff0c\u5bc6\u7801\u5b66\u53ea\u8003\u8651\u5230\u6d88\u606f\u7684<code>\u673a\u5bc6\u6027</code>\uff1a\u5982\u4f55\u5c06\u53ef\u7406\u89e3\u7684\u6d88\u606f\u8f6c\u6362\u6210\u96be\u4ee5\u7406\u89e3\u7684\u6d88\u606f\uff0c\u5e76\u4e14\u4f7f\u5f97\u6709\u79d8\u5bc6\u6d88\u606f\u7684\u4eba\u80fd\u591f\u9006\u5411\u6062\u590d\uff0c\u4f46\u7f3a\u4e4f\u79d8\u5bc6\u6d88\u606f\u7684\u62e6\u622a\u8005\u6216\u7a83\u542c\u8005\u5219\u65e0\u6cd5\u89e3\u8bfb\u3002</p> <p>\u73b0\u4ee3\u5bc6\u7801\u5b66</p> <p>\u8fd1\u6570\u5341\u5e74\u6765\uff0c\u8fd9\u4e2a\u9886\u57df\u5df2\u7ecf\u6269\u5c55\u5230\u6db5\u76d6\u8eab\u4efd\u8ba4\u8bc1\uff08\u6216\u79f0\u9274\u6743\uff09\u3001\u6d88\u606f\u5b8c\u6574\u6027\u68c0\u67e5\u3001\u6570\u5b57\u7b7e\u540d\u3001\u4ea4\u4e92\u8bc1\u660e\u3001\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u7b49\u5404\u7c7b\u6280\u672f\u3002</p>"},{"location":"chapter_preface/modern/#_2","title":"\u6982\u5ff5","text":"<ul> <li>\u8eab\u4efd\u8ba4\u8bc1</li> <li>\u5b8c\u6574\u6027</li> <li>\u6570\u5b57\u7b7e\u540d</li> </ul> <p>\ud83d\udea7 \u65bd\u5de5\u4e2d...</p>"},{"location":"hashing/","title":"Hash \u7b97\u6cd5","text":"<ul> <li>MD5</li> <li>SHA1<ul> <li>SHA256</li> <li>SHA512</li> </ul> </li> <li>SHA2<ul> <li>SHA2-256</li> <li>SHA2-512</li> </ul> </li> <li>SHA3<ul> <li>SHA3-224</li> </ul> </li> </ul>"},{"location":"hashing/md5/","title":"MD5","text":"<p>Message-digest-algorithm</p> <p>MD5\u6d88\u606f\u6458\u8981\u7b97\u6cd5\uff08\u82f1\u8bed\uff1aMD5 Message-Digest Algorithm\uff09\uff0c\u4e00\u79cd\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u5bc6\u7801\u6563\u5217\u51fd\u6570\uff0c\u53ef\u4ee5\u4ea7\u751f\u51fa\u4e00\u4e2a128\u4f4d\uff0816\u4e2a\u5b57\u7b26(BYTES)\uff09\u7684\u6563\u5217\u503c\uff08hash value\uff09\uff0c\u7528\u4e8e\u786e\u4fdd\u4fe1\u606f\u4f20\u8f93\u5b8c\u6574\u4e00\u81f4\u3002</p> <p>\u2014\u2014\u2014 wikipedia</p> <p>\u5386\u53f2</p> <p>MD5\u7531\u7f8e\u56fd\u5bc6\u7801\u5b66\u5bb6\u7f57\u7eb3\u5fb7\u00b7\u674e\u7ef4\u65af\u7279\uff08Ronald Linn Rivest\uff09\u8bbe\u8ba1\uff0c\u4e8e<code>1992</code>\u5e74\u516c\u5f00\uff0c\u7528\u4ee5\u53d6\u4ee3MD4\u7b97\u6cd5\u3002\u8fd9\u5957\u7b97\u6cd5\u7684\u7a0b\u5e8f\u5728 RFC 1321 \u4e2d\u88ab\u52a0\u4ee5\u89c4\u8303\u3002</p> JavaScriptPythonGolang <pre><code>npm install js-md5\n</code></pre> <pre><code>// md5('Message to hash');\nvar hash = md5.create();\nhash.update('Message to hash');\nhash.hex();\n</code></pre> <pre><code>import hashlib\nresult = hashlib.md5(\"Hello Cryptography\".encode())\nprint(result.hexdigest())\n</code></pre> <pre><code>package main\nimport (\n\"crypto/md5\"\n\"fmt\"\n\"io\"\n)\nfunc main() {\nh := md5.New()\nio.WriteString(h, \"Hello Cryptography\")\nfmt.Printf(\"%x\", h.Sum(nil))\n}\n</code></pre>"},{"location":"hashing/ripemd/","title":"RIPEMD \u7b97\u6cd5","text":"<p>RIPEMD \u662f\u4e00\u79cd\u52a0\u5bc6\u54c8\u5e0c\u51fd\u6570\u3002\u7531 \u9c81\u6c76\u5927\u5b66 Hans Dobbertin,Antoon Bosselaers \u548c Bart Prenee\u7ec4\u6210\u7684COSIC \u7814\u7a76\u5c0f\u7ec4\u53d1\u5e03\u4e8e1996\u5e74\u3002 RIPEMD\u662f\u4ee5MD4\u4e3a\u57fa\u7840\u539f\u5219\u6240\u8bbe\u8ba1\u7684 \uff0c\u800c\u4e14\u5176\u8868\u73b0\u4e0e\u66f4\u6709\u540d\u7684SHA-1\u7c7b\u4f3c.</p> <p>RIPEMD-160\u662f\u4ee5\u539f\u59cb\u7248RIPEMD\u6240\u6539\u8fdb\u7684160\u4f4d\u7248\u672c,\u8fd8\u6709128\u4f4d\u3001256\u4f4d\u3001320\u4f4d\u7248\u672c\u3002</p>"},{"location":"hashing/sha/","title":"SHA","text":""},{"location":"hashing/sha/#sha_1","title":"SHA\u5bb6\u65cf","text":"<ul> <li>SHA1</li> <li>SHA2</li> <li>SHA3</li> </ul> PythonJavaScriptGolang <pre><code>import hashlib\nresult = hashlib.sha256(\"Hello Cryptography\".encode()).hexdigest()\nprint(result)\n</code></pre> npm install<pre><code>npm install js-sha256\n</code></pre> <pre><code>import { sha256 } from 'js-sha256';\nvar hash = sha256.create();\nhash.update(\"Hello Cryptography\");\nhash.hex();\n</code></pre> <pre><code>package main\nimport (\n\"crypto/sha256\"\n\"fmt\"\n)\nfunc main() {\nh := sha256.New()\nh.Write([]byte(\"Hello Cryptography\"))\nfmt.Printf(\"%x\", h.Sum(nil))\n}\n</code></pre>"},{"location":"hybrid/","title":"\u6df7\u5408\u5bc6\u7801\u5b66","text":""},{"location":"hybrid/hkdf/","title":"HDKF","text":"<p>\u5bf9\u4e8e\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\uff0cshared_key\u5e94\u5c06\u5176\u4f20\u9012\u7ed9\u5bc6\u94a5\u6d3e\u751f\u51fd\u6570\u3002 \u8fd9\u5141\u8bb8\u5c06\u9644\u52a0\u4fe1\u606f\u6df7\u5408\u5230\u5bc6\u94a5\u4e2d\uff0c\u6d3e\u751f\u591a\u4e2a\u5bc6\u94a5\uff0c\u5e76\u7834\u574f\u53ef\u80fd\u5b58\u5728\u7684\u4efb\u4f55\u7ed3\u6784\u3002</p> <pre><code>from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nalice_private_key = X25519PrivateKey.generate()\nbob_public_key = X25519PrivateKey.generate().public_key()\nshared_key = alice_private_key.exchange(bob_public_key)\nderived_key = HKDF(\nalgorithm=hashes.SHA256(),\nlength=32,\nsalt=None,\ninfo=b'handshake data',\n).derive(shared_key)\n</code></pre>"},{"location":"random_numbers/intro/","title":"\u968f\u673a\u6570\u751f\u6210\u5668","text":"<p>Quote</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u968f\u673a\u6570\u751f\u6210\u5668</p> <pre><code>import os\niv = os.urandom(16)\n</code></pre>"},{"location":"random_numbers/intro/#_2","title":"\u968f\u673a\u6570\u751f\u6210\u5668\u7528\u9014","text":"<ul> <li>\u751f\u6210\u5bc6\u94a5 (\u5bf9\u79f0\u52a0\u5bc6\u548c\u6d88\u606f\u8ba4\u8bc1\u7801)</li> <li>\u751f\u6210\u5bc6\u94a5\u5bf9 (\u975e\u5bf9\u79f0\u52a0\u5bc6\u548c\u6570\u5b57\u7b7e\u540d)</li> <li>\u751f\u6210\u521d\u59cb\u5316\u5411\u91cfIV</li> <li>\u751f\u6210nonce \u9632\u5fa1\u91cd\u653e\u653b\u51fb\u7b49</li> <li>\u751f\u6210salt</li> </ul>"},{"location":"random_numbers/intro/#_3","title":"\u968f\u673a\u6570\u7684\u57fa\u672c\u6027\u8d28","text":"<p>\u968f\u673a\u6027\u3001\u4e0d\u53ef\u9884\u6d4b\u6027\u3001\u4e0d\u53ef\u91cd\u73b0\u6027</p> <p>\u4e0d\u53ef\u9884\u6d4b\u6027</p> <p>\u6240\u8c13\u4e0d\u53ef\u9884\u6d4b\u6027\u662f\u6307\uff1a\u653b\u51fb\u8005\u5df2\u77e5\u8fc7\u53bb\u751f\u6210\u7684\u968f\u673a\u6570\u7684\u524d\u63d0\u4e0b\uff0c\u4f9d\u7136\u65e0\u6cd5\u9884\u6d4b\u51fa\u4e0b\u4e00\u4e2a\u751f\u6210\u7684\u968f\u673a\u6570\u7684\u6027\u8d28</p> <p>\u4e0d\u53ef\u91cd\u73b0\u6027</p> <p>\u4e0d\u53ef\u91cd\u73b0\u6027\u6307\u65e0\u6cd5\u91cd\u65b0\u4e0e\u67d0\u4e00\u968f\u673a\u6570\u5217\u5b8c\u5168\u76f8\u540c\u6570\u5217\u7684\u6027\u8d28\u3002\u5982\u679c\u9664\u4e86\u5c06\u968f\u673a\u6570\u5217\u672c\u8eab\u4fdd\u5b58\u4e0b\u6765\u4ee5\u5916\uff0c\u6ca1\u6709\u5176\u4ed6\u65b9\u6cd5\u91cd\u73b0\u8be5\u6570\u5217\uff0c\u5219\u6211\u4eec\u79f0\u8be5\u968f\u673a\u6570\u5217\u5177\u5907<code>\u4e0d\u53ef\u91cd\u73b0\u6027</code></p> <p>\u2014\u2014\u2014 \u300a\u56fe\u89e3\u5bc6\u7801\u6280\u672f\u300b</p> <p>\u4ec5\u901a\u8fc7\u8f6f\u4ef6\u65e0\u6cd5\u751f\u6210\u5177\u5907\u4e0d\u53ef\u91cd\u73b0\u6027\u7684\u968f\u673a\u6570\u5217\u3002\u8f6f\u4ef6\u53ea\u80fd\u751f\u6210\u4f2a\u968f\u673a\u6570\uff0c\u8fd9\u662f\u56e0\u4e3a\u8ba1\u7b97\u673a\u672c\u8eab\u5177\u5907\u6709\u9650\u7684\u5185\u90e8\u72b6\u6001\u3002\u8981\u60f3\u751f\u6210\u771f\u6b63\u7684\u968f\u673a\u6570\u9700\u8981\u9760\u5916\u90e8\u56e0\u7d20\u3002</p> <p>\u6bd4\u5982\u4ece\u7269\u7406\u4e16\u754c\u83b7\u53d6\u6e29\u5ea6\u3001\u58f0\u97f3\uff0c\u7528\u6237\u79fb\u52a8\u9f20\u6807\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u952e\u76d8\u8f93\u5165\u7684\u65f6\u95f4\u95f4\u9694\u7b49\u3002</p>"},{"location":"random_numbers/pseudo_random/","title":"\u4f2a\u968f\u673a\u6570","text":"<ul> <li>\u6742\u4e71\u7684\u65b9\u6cd5</li> <li>\u7ebf\u6027\u540c\u4f59\u6cd5</li> <li>\u5355\u5411\u6563\u5217\u51fd\u6570</li> <li>\u5bc6\u7801\u6cd5</li> <li>ANSI X9.17</li> </ul>"},{"location":"resource/book/","title":"\ud83d\udcda \u5bc6\u7801\u5b66\u4e66\u7c4d","text":"<p>\u73b0\u4ee3\u5bc6\u7801\u5b66\u7406\u8bba\u4e0e\u5b9e\u8df5</p> <p> </p> <p>\u56fe\u89e3\u5bc6\u7801\u6280\u672f</p> <p> </p>"},{"location":"resource/video/","title":"\ud83c\udfac \u5bc6\u7801\u5b66\u89c6\u9891","text":""},{"location":"resource/video/#khan-academy","title":"Khan Academy","text":"<ul> <li>Khan\u5bc6\u7801\u5b66</li> </ul>"},{"location":"resource/video/#-","title":"\u53ef\u6c57\u5b66\u9662\u516c\u5f00\u8bfe - \u7f51\u6613\u516c\u5f00\u8bfe","text":"<ul> <li> <p>\u5bc6\u7801\u5b66\u5165\u95e8</p> </li> <li> <p>\u53ef\u6c57\u5b66\u9662\u516c\u5f00\u8bfe\uff1a\u73b0\u4ee3\u5bc6\u7801\u5b66</p> </li> <li> <p>\u5bc6\u7801\u5b66\u4e4b\u65c5</p> </li> </ul>"},{"location":"symmetric/","title":"\u5bf9\u79f0\u5bc6\u7801\u5b66","text":"<p>\u5e38\u89c1\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u6709</p> <ul> <li>AES</li> <li>ChaCha20</li> <li>3DES</li> <li>DES</li> <li>Salsa20</li> <li>Blowfish</li> <li>IDEA</li> <li>RC5</li> <li>RC6</li> <li>Camellia</li> </ul>"},{"location":"symmetric/#_2","title":"\u5bf9\u79f0\u5bc6\u7801\u5b66","text":"<p>\u5bf9\u79f0\u5bc6\u7801\u5b66\u53c8\u5206\u4e3a\u4e24\u79cd \u5206\u7ec4\u52a0\u5bc6\u6216\u79f0\u4e3a\u5757\u5bc6\u7801\uff08Block cipher\uff09\u548c\u6d41\u5bc6\u7801\uff08Stream cipher\uff09</p>"},{"location":"symmetric/#block-cipher","title":"\u5206\u7ec4\u52a0\u5bc6 Block cipher","text":"<p>\u5206\u7ec4\u52a0\u5bc6\u5c06\u660e\u6587\u5206\u6210\u591a\u4e2a\u7b49\u957f\u7684\u6a21\u5757\uff08block)\uff0c\u4f7f\u7528\u786e\u5b9a\u7684\u7b97\u6cd5\u548c\u5bf9\u79f0\u5bc6\u94a5\u5bf9\u6bcf\u7ec4\u5206\u522b\u52a0\u5bc6\u89e3\u5bc6</p>"},{"location":"symmetric/#stream-cipher","title":"\u6d41\u5bc6\u7801\uff08Stream cipher\uff09","text":"<p>\u660e\u6587\u6570\u636e\u6bcf\u6b21\u4e0e\u5bc6\u94a5\u6570\u636e\u6d41\u987a\u6b21\u5bf9\u5e94\u52a0\u5bc6\uff0c\u5f97\u5230\u5bc6\u6587\u6570\u636e\u6d41\u3002\u5b9e\u8df5\u4e2d\u6570\u636e\u901a\u5e38\u662f\u4e00\u4e2a\u4f4d\uff08bit\uff09\u5e76\u7528\u5f02\u6216\uff08xor\uff09\u64cd\u4f5c\u52a0\u5bc6\u3002</p>"},{"location":"symmetric/aes/","title":"\u5bf9\u79f0\u5bc6\u7801\u5b66 - AES","text":"<p>\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6(AES)\u5168\u79f0(Advanced Encryption Standard)\uff0c\u539f\u540dRijndael\uff0c\u662f\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u4e0e\u6280\u672f\u7814\u7a76\u9662(NIST) \u57282001\u9009\u5b9a\u7684\u3002</p> <p>AES \u662f Rijndael\u5757\u5bc6\u7801\u7684\u53d8\u4f53\uff0c\u7531\u4e24\u4f4d\u6bd4\u5229\u65f6\u5bc6\u7801\u5b66\u5bb6<code>Joan Daemen</code>\u548c<code>Vincent Rijmen</code> \u5f00\u53d1\uff0c\u4ed6\u4eec\u5728AES \u9009\u62e9\u8fc7\u7a0b\u4e2d\u5411 NIST\u63d0\u4ea4\u4e86\u4e00\u4efd\u63d0\u6848\u3002</p> <p>Rijndael \u662f\u4e00\u7cfb\u5217\u5177\u6709\u4e0d\u540c\u5bc6\u94a5\u548c\u5757\u5927\u5c0f\u7684\u5bc6\u7801\u3002\u5bf9\u4e8e AES\uff0cNIST \u9009\u62e9\u4e86 Rijndael \u5bb6\u65cf\u7684\u4e09\u4e2a\u6210\u5458\uff0c\u6bcf\u4e2a\u6210\u5458\u7684\u5757\u5927\u5c0f\u4e3a 128 \u4f4d\uff0c\u4f46\u5177\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u5bc6\u94a5\u957f\u5ea6\uff1a128\u3001192 \u548c 256 \u4f4d\u3002</p>"},{"location":"symmetric/aes_code/","title":"AES \u4ee3\u7801","text":"JavaScriptPythonGolang <pre><code>const StringToArrayBuffer = (str: string) =&gt; {\nlet buf = new ArrayBuffer(str.length);\nlet bufView = new Uint8Array(buf);\nfor (var i = 0, strLen = str.length; i &lt; strLen; i++) {\nbufView[i] = str.charCodeAt(i);\n}\nreturn buf;\n};\nconst ImportSecretKey = async (rawKey: any, aesName: string) =&gt; {\nreturn await window.crypto.subtle.importKey('raw', rawKey, aesName, true, ['encrypt', 'decrypt']);\n};\nconst AesEncrypt = async (\naesName: string,\nkeyStr: string,\nkeySize: number,\niv: string,\nencoded: Uint8Array,\n) =&gt; {\nconst alg = {\nname: aesName,\niv: StringToArrayBuffer(atob(iv)),\nlength: keySize,\n};\nlet key = await ImportSecretKey(StringToArrayBuffer(atob(keyStr)), aesName);\nlet result = await window.crypto.subtle.encrypt(alg, key, encoded);\nreturn result;\n};\nconst AesGCMEncrypt = async (keyStr: string, iv: string, inputByteData: Uint8Array) =&gt; {\nconst keySize = 256;\nreturn await aesEncrypt('AES-GCM', keyStr, keySize, iv, inputByteData);\n};\n</code></pre> Install cryptography<pre><code>pip install cryptography\n</code></pre> <pre><code>import base64\nfrom cryptography.hazmat.primitives import padding\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nclass AESCrypto(object):\n\"\"\"AESCrypto.\"\"\"\ndef __init__(self, aes_key, aes_iv):\nif not isinstance(aes_key, bytes):\naes_key = aes_key.encode()\nif not isinstance(aes_iv, bytes):\naes_iv = aes_iv.encode()\nself.aes_key = aes_key\nself.aes_iv = aes_iv\ndef gcm_encrypt(self, data):\nencryptor = Cipher(\nalgorithms.AES(self.aes_key),\nmodes.GCM(self.aes_iv),\nbackend=default_backend()\n).encryptor()\n# associated_data will be authenticated but not encrypted,\n# it must also be passed in on decryption.\n# encryptor.authenticate_additional_data(associated_data)\nif isinstance(data, str):\ndata = data.encode(\"utf-8\")\nciphertext = encryptor.update(data) + encryptor.finalize()\nresult = ciphertext + encryptor.tag\nreturn result\ndef gcm_decrypt(self, bytes_data):\ntag = bytes_data[-16:]\nciphertext = bytes_data[:-16]\ndecryptor = Cipher(\nalgorithms.AES(self.aes_key),\nmodes.GCM(self.aes_iv, tag),\nbackend=default_backend()\n).decryptor()\n# We put associated_data back in or the tag will fail to verify\n# when we finalize the decryptor.\n# decryptor.authenticate_additional_data(associated_data)\nresult = decryptor.update(ciphertext) + decryptor.finalize()\nreturn result.decode(\"utf-8\")\naes = AESCrypto(key, iv)\nbyte_data = aes.gcm_encrypt(\"hello\".encode(\"utf-8\"))\ntext = aes.gcm_decrypt(byte_data)\n</code></pre> <pre><code>go install cryptography\n</code></pre>"},{"location":"symmetric/chacha20/","title":"ChaCha20","text":"<p>\ud83d\udea7 \u65bd\u5de5\u4e2d...</p>"},{"location":"symmetric/preface/","title":"\u524d\u8a00","text":""},{"location":"symmetric/preface/#xor","title":"XOR \u5f02\u6216","text":"<p>1\u4e2a\u6bd4\u7279\u7684\u5f02\u6216\u8fd0\u7b97\u89c4\u5219\u5982\u4e0b</p> <p> 0 XOR 0 = 0 0 XOR 1 = 1 1 XOR 0 = 1 1 XOR 1 = 0 </p> <p>\u5f02\u6216\u64cd\u4f5c\u53ef\u4ee5\u60f3\u8c61\u6210\u5361\u7247\u7ffb\u8f6c</p> <p>\u5047\u8bbe <code>0\u8868\u793a\u6b63\u9762</code>\uff0c <code>1\u8868\u793a\u53cd\u9762</code></p> <p>XOR\u540e\u7684\u64cd\u4f5c\u6570\u5b571\u8868\u793a\u7ffb\u8f6c\uff0c0\u8868\u793a\u4e0d\u52a8</p> <ul> <li>0 XOR 0 \u5361\u7247\u6b63\u9762\uff0c \u6ca1\u6709\u7ffb\u8f6c\uff0c\u8fd8\u662f\u6b63\u9762 \u7ed3\u679c\u4e3a0</li> <li>0 XOR 1 \u5361\u7247\u6b63\u9762\uff0c \u7ffb\u8f6c\u4e00\u6b21\uff0c\u53d8\u6210\u53cd\u9762 \u7ed3\u679c\u4e3a1</li> <li>1 XOR 0 \u5361\u7247\u53cd\u9762\uff0c\u6ca1\u6709\u7ffb\u8f6c\uff0c\u8fd8\u662f\u53cd\u9762 \u7ed3\u679c\u4e3a1</li> <li>1 XOR 1 \u5361\u7247\u53cd\u9762\uff0c\u7ffb\u8f6c\u4e00\u6b21\uff0c\u53d8\u4e3a\u6b63\u9762 \u7ed3\u679c\u4e3a0</li> </ul> <p>\u6bd4\u7279\u5e8f\u5217\u7684xor</p> <p></p> <p>\u6bd4\u7279\u5e8f\u5217\u7684\u5f02\u6216\u64cd\u4f5c\u4e0e\u5355\u4e2a\u6bd4\u7279\u64cd\u4f5c\u540c\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u5361\u7247\u7ffb\u8f6c\u7406\u89e3\u3002</p> <p>\u6700\u7b80\u6613\u7684\u5bf9\u79f0\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u6a21\u578b</p> <p></p> <p>\u539f\u59cb<code>\u660e\u6587</code>\u7ecf\u8fc7\u5bc6\u94a5\u52a0\u5bc6\uff08XOR \u5f02\u6216\u64cd\u4f5c\u540e\uff09\u5f97\u5230\u5bc6\u6587\uff0c \u5bc6\u6587\u4e0e\u5bc6\u94a5\u518d\u4e00\u6b21\u52a0\u5bc6XOR \u5f02\u6216\u64cd\u4f5c\u540e\uff09\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5927\u5bb6\u4f1a\u53d1\u73b0\u53c8\u8fd8\u539f\u6210\u4e86\u660e\u6587\u3002</p> <pre><code>\u8fd9\u5c31\u662f\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u5bf9\u79f0\u52a0\u5bc6\u7684\u793a\u4f8b\u3002\n</code></pre> <p>\u6574\u4f53\u7684\u903b\u8f91\u8fd8\u662f\u53ef\u4ee5\u7528\u4e4b\u524d\u7684\u7ffb\u8f6c\u5361\u7247\u6765\u7406\u89e3\uff0c \u660e\u6587\u7ecf\u8fc7 \u7ffb\u8f6c\u5361\u7247(\u5f02\u6216\u64cd\u4f5c) \u540e\u5f97\u5230\u7ed3\u679c-&gt;\u5bc6\u6587\uff0c \u5bc6\u6587\u7ecf\u8fc7\u76f8\u540c\u7684\u7ffb\u8f6c\u89c4\u5219\u540e\uff0c\u53c8\u56de\u5230\u4e86\u539f\u6765\u7684\u5361\u7247\u72b6\u6001\u3002</p>"},{"location":"symmetric/salsa20/","title":"Salsa20","text":"<p>Salsa20</p> <p>Salsa20\u662f\u4e00\u79cd\u6d41\u52a0\u5bc6\u7b97\u6cd5\uff0c\u7531\u4e39\u5c3c\u5c14\u00b7J\u00b7\u4f2f\u6069\u65af\u5766\u63d0\u4ea4\u5230eSTREAM\u3002</p> <p>\ud83d\udea7 \u65bd\u5de5\u4e2d...</p>"},{"location":"symmetric/xchacha20/","title":"XChaCha20","text":""},{"location":"symmetric/xsalsa20/","title":"XSalsa20","text":"<p>XSalsa20 \u662f\u57fa\u4e8e Salsa20\u7684\u6d41\u5bc6\u7801\u7b97\u6cd5\uff0c\u4f46\u662f\u62e5\u6709\u66f4\u957f\u7684nonce\uff1b Salsa20\u7684nonce\u4e3a64\u4f4d\uff0c\u800cXSalsa20\u4f7f\u7528192\u4f4d\u3002</p>"}]}